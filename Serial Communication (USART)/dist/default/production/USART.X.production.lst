

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 18 05:39:40 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.05
    25                           ; Generated 20/12/2018 GMT
    26                           ; 
    27                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  018C                     	;# 
   117  018D                     	;# 
   118  0000                     	;# 
   119  0001                     	;# 
   120  0002                     	;# 
   121  0003                     	;# 
   122  0004                     	;# 
   123  0005                     	;# 
   124  0006                     	;# 
   125  0007                     	;# 
   126  0008                     	;# 
   127  0009                     	;# 
   128  000A                     	;# 
   129  000B                     	;# 
   130  000C                     	;# 
   131  000D                     	;# 
   132  000E                     	;# 
   133  000E                     	;# 
   134  000F                     	;# 
   135  0010                     	;# 
   136  0011                     	;# 
   137  0012                     	;# 
   138  0013                     	;# 
   139  0014                     	;# 
   140  0015                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0017                     	;# 
   144  0018                     	;# 
   145  0019                     	;# 
   146  001A                     	;# 
   147  001B                     	;# 
   148  001B                     	;# 
   149  001C                     	;# 
   150  001D                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  0081                     	;# 
   154  0085                     	;# 
   155  0086                     	;# 
   156  0087                     	;# 
   157  0088                     	;# 
   158  0089                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0094                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  018C                     	;# 
   177  018D                     	;# 
   178                           
   179                           	psect	strings
   180  0003                     __pstrings:	
   181  0003                     stringtab:	
   182  0003                     __stringtab:	
   183  0003                     stringcode:	
   184                           ;	String table - string pointers are 1 byte each
   185                           
   186  0003                     stringdir:	
   187  0003  3000               	movlw	high stringdir
   188  0004  008A               	movwf	10
   189  0005  0804               	movf	4,w
   190  0006  0A84               	incf	4,f
   191  0007  0782               	addwf	2,f
   192  0008                     __stringbase:	
   193  0008  3400               	retlw	0
   194  0009                     __end_of__stringtab:	
   195  0009                     _dpowers:	
   196  0009  3401               	retlw	1
   197  000A  3400               	retlw	0
   198  000B  340A               	retlw	10
   199  000C  3400               	retlw	0
   200  000D  3464               	retlw	100
   201  000E  3400               	retlw	0
   202  000F  34E8               	retlw	232
   203  0010  3403               	retlw	3
   204  0011  3410               	retlw	16
   205  0012  3427               	retlw	39
   206  0013                     __end_of_dpowers:	
   207  001E                     _ADRESH	set	30
   208  001F                     _ADCON0bits	set	31
   209  0019                     _TXREG	set	25
   210  0018                     _RCSTAbits	set	24
   211  0064                     _TXIF	set	100
   212  009E                     _ADRESL	set	158
   213  009F                     _ADCON1bits	set	159
   214  0099                     _SPBRG	set	153
   215  0098                     _TXSTAbits	set	152
   216  0013                     STR_1:	
   217  0013  3453               	retlw	83	;'S'
   218  0014  3465               	retlw	101	;'e'
   219  0015  346E               	retlw	110	;'n'
   220  0016  3473               	retlw	115	;'s'
   221  0017  346F               	retlw	111	;'o'
   222  0018  3472               	retlw	114	;'r'
   223  0019  3420               	retlw	32	;' '
   224  001A  3456               	retlw	86	;'V'
   225  001B  3461               	retlw	97	;'a'
   226  001C  346C               	retlw	108	;'l'
   227  001D  3475               	retlw	117	;'u'
   228  001E  3465               	retlw	101	;'e'
   229  001F  3420               	retlw	32	;' '
   230  0020  343D               	retlw	61	;'='
   231  0021  3420               	retlw	32	;' '
   232  0022  3425               	retlw	37	;'%'
   233  0023  3464               	retlw	100	;'d'
   234  0024  3400               	retlw	0
   235                           
   236                           ; #config settings
   237  0000                     
   238                           	psect	cinit
   239  07F5                     start_initialization:	
   240  07F5                     __initialization:	
   241                           
   242                           ; Clear objects allocated to BANK0
   243  07F5  1383               	bcf	3,7	;select IRP bank0
   244  07F6  3020               	movlw	low __pbssBANK0
   245  07F7  0084               	movwf	4
   246  07F8  3052               	movlw	low (__pbssBANK0+50)
   247  07F9  120A  118A  2534   	fcall	clear_ram0
   248  07FC                     end_of_initialization:	
   249                           ;End of C runtime variable initialization code
   250                           
   251  07FC                     __end_of__initialization:	
   252  07FC  0183               	clrf	3
   253  07FD  120A  118A  2E46   	ljmp	_main	;jump to C main() function
   254                           
   255                           	psect	bssBANK0
   256  0020                     __pbssBANK0:	
   257  0020                     _buffer:	
   258  0020                     	ds	50
   259                           
   260                           	psect	clrtext
   261  0534                     clear_ram0:	
   262                           ;	Called with FSR containing the base address, and
   263                           ;	W with the last address+1
   264                           
   265  0534  0064               	clrwdt	;clear the watchdog before getting into this loop
   266  0535                     clrloop0:	
   267  0535  0180               	clrf	0	;clear RAM location pointed to by FSR
   268  0536  0A84               	incf	4,f	;increment pointer
   269  0537  0604               	xorwf	4,w	;XOR with final address
   270  0538  1903               	btfsc	3,2	;have we reached the end yet?
   271  0539  3400               	retlw	0	;all done for this memory range, return
   272  053A  0604               	xorwf	4,w	;XOR again to restore value
   273  053B  2D35               	goto	clrloop0	;do the next byte
   274                           
   275                           	psect	cstackCOMMON
   276  0070                     __pcstackCOMMON:	
   277  0070                     ?___init_usart:	
   278  0070                     ??___init_usart:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ?___write_char:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ??___write_char:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ?___usart_write_ln:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?___init_adc:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ??___init_adc:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_main:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ?_strlen:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?___adc_read:	
   303                           ; 2 bytes @ 0x0
   304                           
   305  0070                     ?___lwdiv:	
   306                           ; 2 bytes @ 0x0
   307                           
   308  0070                     ?___aldiv:	
   309                           ; 2 bytes @ 0x0
   310                           
   311  0070                     ___write_char@c:	
   312                           ; 4 bytes @ 0x0
   313                           
   314  0070                     ___adc_read@adc_channel:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ___lwdiv@divisor:	
   318                           ; 2 bytes @ 0x0
   319                           
   320  0070                     ___aldiv@divisor:	
   321                           ; 2 bytes @ 0x0
   322                           
   323                           
   324                           ; 4 bytes @ 0x0
   325  0070                     	ds	2
   326  0072                     ??_strlen:	
   327  0072                     ??___adc_read:	
   328                           ; 1 bytes @ 0x2
   329                           
   330  0072                     ___lwdiv@dividend:	
   331                           ; 1 bytes @ 0x2
   332                           
   333                           
   334                           ; 2 bytes @ 0x2
   335  0072                     	ds	1
   336  0073                     strlen@s:	
   337                           
   338                           ; 1 bytes @ 0x3
   339  0073                     	ds	1
   340  0074                     ??___lwdiv:	
   341  0074                     strlen@cp:	
   342                           ; 1 bytes @ 0x4
   343                           
   344  0074                     ___adc_read@adc_value:	
   345                           ; 1 bytes @ 0x4
   346                           
   347  0074                     ___aldiv@dividend:	
   348                           ; 2 bytes @ 0x4
   349                           
   350                           
   351                           ; 4 bytes @ 0x4
   352  0074                     	ds	1
   353  0075                     ??___usart_write_ln:	
   354  0075                     ___lwdiv@quotient:	
   355                           ; 1 bytes @ 0x5
   356                           
   357                           
   358                           ; 2 bytes @ 0x5
   359  0075                     	ds	1
   360  0076                     ___usart_write_ln@i:	
   361                           
   362                           ; 2 bytes @ 0x6
   363  0076                     	ds	1
   364  0077                     ___lwdiv@counter:	
   365                           
   366                           ; 1 bytes @ 0x7
   367  0077                     	ds	1
   368  0078                     ??___aldiv:	
   369  0078                     ?___lwmod:	
   370                           ; 1 bytes @ 0x8
   371                           
   372  0078                     ___usart_write_ln@data:	
   373                           ; 2 bytes @ 0x8
   374                           
   375  0078                     ___lwmod@divisor:	
   376                           ; 1 bytes @ 0x8
   377                           
   378                           
   379                           ; 2 bytes @ 0x8
   380  0078                     	ds	1
   381  0079                     ??___set_baud_rate:	
   382                           
   383                           ; 1 bytes @ 0x9
   384  0079                     	ds	1
   385  007A                     ___lwmod@dividend:	
   386                           
   387                           ; 2 bytes @ 0xA
   388  007A                     	ds	2
   389  007C                     ??___lwmod:	
   390                           
   391                           ; 1 bytes @ 0xC
   392  007C                     	ds	1
   393  007D                     ___lwmod@counter:	
   394                           
   395                           ; 1 bytes @ 0xD
   396  007D                     	ds	1
   397                           
   398                           	psect	cstackBANK0
   399  0052                     __pcstackBANK0:	
   400  0052                     ?_sprintf:	
   401  0052                     sprintf@f:	
   402                           ; 2 bytes @ 0x0
   403                           
   404  0052                     ___aldiv@counter:	
   405                           ; 1 bytes @ 0x0
   406                           
   407                           
   408                           ; 1 bytes @ 0x0
   409  0052                     	ds	1
   410  0053                     ___aldiv@sign:	
   411                           
   412                           ; 1 bytes @ 0x1
   413  0053                     	ds	1
   414  0054                     ___aldiv@quotient:	
   415                           
   416                           ; 4 bytes @ 0x2
   417  0054                     	ds	1
   418  0055                     ??_sprintf:	
   419                           
   420                           ; 1 bytes @ 0x3
   421  0055                     	ds	3
   422  0058                     ?___set_baud_rate:	
   423  0058                     sprintf@ap:	
   424                           ; 1 bytes @ 0x6
   425                           
   426  0058                     ___set_baud_rate@baud_rate:	
   427                           ; 1 bytes @ 0x6
   428                           
   429                           
   430                           ; 2 bytes @ 0x6
   431  0058                     	ds	1
   432  0059                     sprintf@flag:	
   433                           
   434                           ; 1 bytes @ 0x7
   435  0059                     	ds	1
   436  005A                     sprintf@prec:	
   437                           
   438                           ; 1 bytes @ 0x8
   439  005A                     	ds	1
   440  005B                     sprintf@val:	
   441                           
   442                           ; 2 bytes @ 0x9
   443  005B                     	ds	2
   444  005D                     sprintf@sp:	
   445                           
   446                           ; 1 bytes @ 0xB
   447  005D                     	ds	1
   448  005E                     sprintf@c:	
   449                           
   450                           ; 1 bytes @ 0xC
   451  005E                     	ds	1
   452  005F                     ??_main:	
   453                           
   454                           ; 1 bytes @ 0xD
   455  005F                     	ds	3
   456  0062                     main@adc_value:	
   457                           
   458                           ; 2 bytes @ 0x10
   459  0062                     	ds	2
   460                           
   461                           	psect	maintext
   462  0646                     __pmaintext:	
   463 ;;
   464 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   465 ;;
   466 ;; *************** function _main *****************
   467 ;; Defined at:
   468 ;;		line 91 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  adc_value       2   16[BANK0 ] int 
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : B00/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   482 ;;      Params:         0       0       0       0       0
   483 ;;      Locals:         0       2       0       0       0
   484 ;;      Temps:          0       3       0       0       0
   485 ;;      Totals:         0       5       0       0       0
   486 ;;Total ram usage:        5 bytes
   487 ;; Hardware stack levels required when called:    2
   488 ;; This function calls:
   489 ;;		___adc_read
   490 ;;		___init_adc
   491 ;;		___init_usart
   492 ;;		___set_baud_rate
   493 ;;		___usart_write_ln
   494 ;;		_sprintf
   495 ;; This function is called by:
   496 ;;		Startup code after reset
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           
   501                           ;psect for function _main
   502  0646                     _main:	
   503                           
   504                           ;main.c: 92:     __init_adc();
   505                           
   506                           ;incstack = 0
   507                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   508  0646  120A  118A  2548  120A  118A  	fcall	___init_adc
   509                           
   510                           ;main.c: 93:     __init_usart();
   511  064B  120A  118A  253C  120A  118A  	fcall	___init_usart
   512                           
   513                           ;main.c: 94:     __set_baud_rate(9600);
   514  0650  3080               	movlw	128
   515  0651  1283               	bcf	3,5	;RP0=0, select bank0
   516  0652  1303               	bcf	3,6	;RP1=0, select bank0
   517  0653  00D8               	movwf	___set_baud_rate@baud_rate
   518  0654  3025               	movlw	37
   519  0655  00D9               	movwf	___set_baud_rate@baud_rate+1
   520  0656  120A  118A  256D  120A  118A  	fcall	___set_baud_rate
   521  065B                     l1123:	
   522                           
   523                           ;main.c: 97:         int adc_value = __adc_read(1);
   524  065B  3001               	movlw	1
   525  065C  00F0               	movwf	___adc_read@adc_channel
   526  065D  3000               	movlw	0
   527  065E  00F1               	movwf	___adc_read@adc_channel+1
   528  065F  120A  118A  2589  120A  118A  	fcall	___adc_read
   529  0664  0871               	movf	?___adc_read+1,w
   530  0665  1283               	bcf	3,5	;RP0=0, select bank0
   531  0666  1303               	bcf	3,6	;RP1=0, select bank0
   532  0667  00E3               	movwf	main@adc_value+1
   533  0668  0870               	movf	?___adc_read,w
   534  0669  00E2               	movwf	main@adc_value
   535                           
   536                           ;main.c: 98:         sprintf(buffer, "Sensor Value = %d", adc_value);
   537  066A  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   538  066B  00DF               	movwf	??_main
   539  066C  085F               	movf	??_main,w
   540  066D  00D2               	movwf	sprintf@f
   541  066E  0863               	movf	main@adc_value+1,w
   542  066F  00D4               	movwf	?_sprintf+2
   543  0670  0862               	movf	main@adc_value,w
   544  0671  00D3               	movwf	?_sprintf+1
   545  0672  3020               	movlw	(low (_buffer| 0))& (0+255)
   546  0673  120A  118A  271D  120A  118A  	fcall	_sprintf
   547                           
   548                           ;main.c: 99:         __usart_write_ln(buffer);
   549  0678  3020               	movlw	(low (_buffer| 0))& (0+255)
   550  0679  120A  118A  25AF  120A  118A  	fcall	___usart_write_ln
   551                           
   552                           ;main.c: 100:         _delay((unsigned long)((1000)*(16000000/4000.0)));
   553  067E  3015               	movlw	21
   554  067F  1283               	bcf	3,5	;RP0=0, select bank0
   555  0680  1303               	bcf	3,6	;RP1=0, select bank0
   556  0681  00E1               	movwf	??_main+2
   557  0682  304B               	movlw	75
   558  0683  00E0               	movwf	??_main+1
   559  0684  30BD               	movlw	189
   560  0685  00DF               	movwf	??_main
   561  0686                     u697:	
   562  0686  0BDF               	decfsz	??_main,f
   563  0687  2E86               	goto	u697
   564  0688  0BE0               	decfsz	??_main+1,f
   565  0689  2E86               	goto	u697
   566  068A  0BE1               	decfsz	??_main+2,f
   567  068B  2E86               	goto	u697
   568  068C  2E8D               	nop2
   569  068D  2E5B               	goto	l1123
   570  068E                     __end_of_main:	
   571                           
   572                           	psect	text1
   573  071D                     __ptext1:	
   574 ;; *************** function _sprintf *****************
   575 ;; Defined at:
   576 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;  sp              1    wreg     PTR unsigned char 
   579 ;;		 -> buffer(50), 
   580 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   581 ;;		 -> STR_1(18), 
   582 ;; Auto vars:     Size  Location     Type
   583 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   584 ;;		 -> buffer(50), 
   585 ;;  tmpval          4    0        struct .
   586 ;;  val             2    9[BANK0 ] unsigned int 
   587 ;;  cp              2    0        PTR const unsigned char 
   588 ;;  len             2    0        unsigned int 
   589 ;;  c               1   12[BANK0 ] unsigned char 
   590 ;;  prec            1    8[BANK0 ] char 
   591 ;;  flag            1    7[BANK0 ] unsigned char 
   592 ;;  ap              1    6[BANK0 ] PTR void [1]
   593 ;;		 -> ?_sprintf(2), 
   594 ;; Return value:  Size  Location     Type
   595 ;;                  2    0[BANK0 ] int 
   596 ;; Registers used:
   597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   603 ;;      Params:         0       3       0       0       0
   604 ;;      Locals:         0       7       0       0       0
   605 ;;      Temps:          0       3       0       0       0
   606 ;;      Totals:         0      13       0       0       0
   607 ;;Total ram usage:       13 bytes
   608 ;; Hardware stack levels used:    1
   609 ;; Hardware stack levels required when called:    1
   610 ;; This function calls:
   611 ;;		___lwdiv
   612 ;;		___lwmod
   613 ;; This function is called by:
   614 ;;		_main
   615 ;; This function uses a non-reentrant model
   616 ;;
   617                           
   618                           
   619                           ;psect for function _sprintf
   620  071D                     _sprintf:	
   621                           
   622                           ;incstack = 0
   623                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   624                           ;sprintf@sp stored from wreg
   625  071D  1283               	bcf	3,5	;RP0=0, select bank0
   626  071E  1303               	bcf	3,6	;RP1=0, select bank0
   627  071F  00DD               	movwf	sprintf@sp
   628                           
   629                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
   630  0720  3053               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   631  0721  00D5               	movwf	??_sprintf
   632  0722  0855               	movf	??_sprintf,w
   633  0723  00D8               	movwf	sprintf@ap
   634  0724                     l1107:	
   635                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
   636                           
   637                           
   638                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
   639  0724  3001               	movlw	1
   640  0725  07D2               	addwf	sprintf@f,f
   641  0726  30FF               	movlw	-1
   642  0727  0752               	addwf	sprintf@f,w
   643  0728  0084               	movwf	4
   644  0729  120A  118A  2003  120A  118A  	fcall	stringdir
   645  072E  00D5               	movwf	??_sprintf
   646  072F  0855               	movf	??_sprintf,w
   647  0730  00DE               	movwf	sprintf@c
   648  0731  085E               	movf	sprintf@c,w
   649  0732  1903               	btfsc	3,2
   650  0733  2FF0               	goto	l1109
   651                           
   652                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
   653  0734  3025               	movlw	37
   654  0735  065E               	xorwf	sprintf@c,w
   655  0736  1903               	btfsc	3,2
   656  0737  2F44               	goto	l1063
   657                           
   658                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
   659  0738  085E               	movf	sprintf@c,w
   660  0739  00D5               	movwf	??_sprintf
   661  073A  085D               	movf	sprintf@sp,w
   662  073B  0084               	movwf	4
   663  073C  0855               	movf	??_sprintf,w
   664  073D  1383               	bcf	3,7	;select IRP bank0
   665  073E  0080               	movwf	0
   666  073F  3001               	movlw	1
   667  0740  00D5               	movwf	??_sprintf
   668  0741  0855               	movf	??_sprintf,w
   669  0742  07DD               	addwf	sprintf@sp,f
   670                           
   671                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
   672  0743  2F24               	goto	l1107
   673  0744                     l1063:	
   674                           
   675                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
   676  0744  01D9               	clrf	sprintf@flag
   677                           
   678                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
   679  0745  3001               	movlw	1
   680  0746  07D2               	addwf	sprintf@f,f
   681  0747  30FF               	movlw	-1
   682  0748  0752               	addwf	sprintf@f,w
   683  0749  0084               	movwf	4
   684  074A  120A  118A  2003  120A  118A  	fcall	stringdir
   685  074F  00DE               	movwf	sprintf@c
   686  0750  00D5               	movwf	??_sprintf
   687  0751  01D6               	clrf	??_sprintf+1
   688                           
   689                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   690                           ; Switch size 1, requested type "simple"
   691                           ; Number of cases is 1, Range of values is 0 to 0
   692                           ; switch strategies available:
   693                           ; Name         Instructions Cycles
   694                           ; simple_byte            4     3 (average)
   695                           ; direct_byte           11     8 (fixed)
   696                           ; jumptable            260     6 (fixed)
   697                           ;	Chosen strategy is simple_byte
   698  0752  0856               	movf	??_sprintf+1,w
   699  0753  3A00               	xorlw	0	; case 0
   700  0754  1903               	skipnz
   701  0755  2F57               	goto	l1151
   702  0756  2F24               	goto	l1107
   703  0757                     l1151:	
   704                           
   705                           ; Switch size 1, requested type "simple"
   706                           ; Number of cases is 3, Range of values is 0 to 105
   707                           ; switch strategies available:
   708                           ; Name         Instructions Cycles
   709                           ; simple_byte           10     6 (average)
   710                           ; jumptable            260     6 (fixed)
   711                           ;	Chosen strategy is simple_byte
   712  0757  0855               	movf	??_sprintf,w
   713  0758  3A00               	xorlw	0	; case 0
   714  0759  1903               	skipnz
   715  075A  2FF0               	goto	l1109
   716  075B  3A64               	xorlw	100	; case 100
   717  075C  1903               	skipnz
   718  075D  2F62               	goto	l1069
   719  075E  3A0D               	xorlw	13	; case 105
   720  075F  1903               	skipnz
   721  0760  2F62               	goto	l1069
   722  0761  2F24               	goto	l1107
   723  0762                     l1069:	
   724                           
   725                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   726  0762  0858               	movf	sprintf@ap,w
   727  0763  0084               	movwf	4
   728  0764  1383               	bcf	3,7	;select IRP bank0
   729  0765  0800               	movf	0,w
   730  0766  00DB               	movwf	sprintf@val
   731  0767  0A84               	incf	4,f
   732  0768  0800               	movf	0,w
   733  0769  00DC               	movwf	sprintf@val+1
   734  076A  3002               	movlw	2
   735  076B  00D5               	movwf	??_sprintf
   736  076C  0855               	movf	??_sprintf,w
   737  076D  07D8               	addwf	sprintf@ap,f
   738                           
   739                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
   740  076E  1FDC               	btfss	sprintf@val+1,7
   741  076F  2F79               	goto	l1079
   742                           
   743                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
   744  0770  3003               	movlw	3
   745  0771  00D5               	movwf	??_sprintf
   746  0772  0855               	movf	??_sprintf,w
   747  0773  04D9               	iorwf	sprintf@flag,f
   748                           
   749                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
   750  0774  09DB               	comf	sprintf@val,f
   751  0775  09DC               	comf	sprintf@val+1,f
   752  0776  0ADB               	incf	sprintf@val,f
   753  0777  1903               	skipnz
   754  0778  0ADC               	incf	sprintf@val+1,f
   755  0779                     l1079:	
   756                           
   757                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   758  0779  01DE               	clrf	sprintf@c
   759  077A  0ADE               	incf	sprintf@c,f
   760  077B                     l1085:	
   761                           
   762                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
   763  077B  085E               	movf	sprintf@c,w
   764  077C  00D5               	movwf	??_sprintf
   765  077D  0755               	addwf	??_sprintf,w
   766  077E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   767  077F  0084               	movwf	4
   768  0780  120A  118A  2003  120A  118A  	fcall	stringdir
   769  0785  00D6               	movwf	??_sprintf+1
   770  0786  120A  118A  2003  120A  118A  	fcall	stringdir
   771  078B  00D7               	movwf	??_sprintf+2
   772  078C  0857               	movf	??_sprintf+2,w
   773  078D  025C               	subwf	sprintf@val+1,w
   774  078E  1D03               	skipz
   775  078F  2F92               	goto	u645
   776  0790  0856               	movf	??_sprintf+1,w
   777  0791  025B               	subwf	sprintf@val,w
   778  0792                     u645:	
   779  0792  1C03               	btfss	3,0
   780  0793  2F9C               	goto	l1091
   781  0794  3001               	movlw	1
   782  0795  00D5               	movwf	??_sprintf
   783  0796  0855               	movf	??_sprintf,w
   784  0797  07DE               	addwf	sprintf@c,f
   785  0798  3005               	movlw	5
   786  0799  065E               	xorwf	sprintf@c,w
   787  079A  1D03               	btfss	3,2
   788  079B  2F7B               	goto	l1085
   789  079C                     l1091:	
   790                           
   791                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
   792  079C  0859               	movf	sprintf@flag,w
   793  079D  3903               	andlw	3
   794  079E  1903               	btfsc	3,2
   795  079F  2FAB               	goto	l1097
   796                           
   797                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
   798  07A0  302D               	movlw	45
   799  07A1  00D5               	movwf	??_sprintf
   800  07A2  085D               	movf	sprintf@sp,w
   801  07A3  0084               	movwf	4
   802  07A4  0855               	movf	??_sprintf,w
   803  07A5  1383               	bcf	3,7	;select IRP bank0
   804  07A6  0080               	movwf	0
   805  07A7  3001               	movlw	1
   806  07A8  00D5               	movwf	??_sprintf
   807  07A9  0855               	movf	??_sprintf,w
   808  07AA  07DD               	addwf	sprintf@sp,f
   809  07AB                     l1097:	
   810                           
   811                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
   812  07AB  085E               	movf	sprintf@c,w
   813  07AC  00D5               	movwf	??_sprintf
   814  07AD  0855               	movf	??_sprintf,w
   815  07AE  00DA               	movwf	sprintf@prec
   816  07AF                     l1105:	
   817                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
   818                           
   819                           
   820                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
   821  07AF  30FF               	movlw	255
   822  07B0  00D5               	movwf	??_sprintf
   823  07B1  0855               	movf	??_sprintf,w
   824  07B2  07DA               	addwf	sprintf@prec,f
   825  07B3  0A5A               	incf	sprintf@prec,w
   826  07B4  1903               	btfsc	3,2
   827  07B5  2F24               	goto	l1107
   828                           
   829                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
   830  07B6  300A               	movlw	10
   831  07B7  00F8               	movwf	___lwmod@divisor
   832  07B8  3000               	movlw	0
   833  07B9  00F9               	movwf	___lwmod@divisor+1
   834  07BA  085A               	movf	sprintf@prec,w
   835  07BB  00D5               	movwf	??_sprintf
   836  07BC  0755               	addwf	??_sprintf,w
   837  07BD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   838  07BE  0084               	movwf	4
   839  07BF  120A  118A  2003  120A  118A  	fcall	stringdir
   840  07C4  00F0               	movwf	___lwdiv@divisor
   841  07C5  120A  118A  2003  120A  118A  	fcall	stringdir
   842  07CA  00F1               	movwf	___lwdiv@divisor+1
   843  07CB  085C               	movf	sprintf@val+1,w
   844  07CC  00F3               	movwf	___lwdiv@dividend+1
   845  07CD  085B               	movf	sprintf@val,w
   846  07CE  00F2               	movwf	___lwdiv@dividend
   847  07CF  120A  118A  260A  120A  118A  	fcall	___lwdiv
   848  07D4  0871               	movf	?___lwdiv+1,w
   849  07D5  00FB               	movwf	___lwmod@dividend+1
   850  07D6  0870               	movf	?___lwdiv,w
   851  07D7  00FA               	movwf	___lwmod@dividend
   852  07D8  120A  118A  25D8  120A  118A  	fcall	___lwmod
   853  07DD  0878               	movf	?___lwmod,w
   854  07DE  3E30               	addlw	48
   855  07DF  1283               	bcf	3,5	;RP0=0, select bank0
   856  07E0  1303               	bcf	3,6	;RP1=0, select bank0
   857  07E1  00D6               	movwf	??_sprintf+1
   858  07E2  0856               	movf	??_sprintf+1,w
   859  07E3  00DE               	movwf	sprintf@c
   860                           
   861                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
   862  07E4  085E               	movf	sprintf@c,w
   863  07E5  00D5               	movwf	??_sprintf
   864  07E6  085D               	movf	sprintf@sp,w
   865  07E7  0084               	movwf	4
   866  07E8  0855               	movf	??_sprintf,w
   867  07E9  1383               	bcf	3,7	;select IRP bank0
   868  07EA  0080               	movwf	0
   869  07EB  3001               	movlw	1
   870  07EC  00D5               	movwf	??_sprintf
   871  07ED  0855               	movf	??_sprintf,w
   872  07EE  07DD               	addwf	sprintf@sp,f
   873  07EF  2FAF               	goto	l1105
   874  07F0                     l1109:	
   875                           
   876                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
   877  07F0  085D               	movf	sprintf@sp,w
   878  07F1  0084               	movwf	4
   879  07F2  1383               	bcf	3,7	;select IRP bank0
   880  07F3  0180               	clrf	0
   881  07F4  0008               	return
   882  07F5                     __end_of_sprintf:	
   883                           
   884                           	psect	text2
   885  05D8                     __ptext2:	
   886 ;; *************** function ___lwmod *****************
   887 ;; Defined at:
   888 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  divisor         2    8[COMMON] unsigned int 
   891 ;;  dividend        2   10[COMMON] unsigned int 
   892 ;; Auto vars:     Size  Location     Type
   893 ;;  counter         1   13[COMMON] unsigned char 
   894 ;; Return value:  Size  Location     Type
   895 ;;                  2    8[COMMON] unsigned int 
   896 ;; Registers used:
   897 ;;		wreg, status,2, status,0
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   903 ;;      Params:         4       0       0       0       0
   904 ;;      Locals:         1       0       0       0       0
   905 ;;      Temps:          1       0       0       0       0
   906 ;;      Totals:         6       0       0       0       0
   907 ;;Total ram usage:        6 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_sprintf
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           
   917                           ;psect for function ___lwmod
   918  05D8                     ___lwmod:	
   919                           
   920                           ;incstack = 0
   921                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   922  05D8  0878               	movf	___lwmod@divisor,w
   923  05D9  0479               	iorwf	___lwmod@divisor+1,w
   924  05DA  1903               	btfsc	3,2
   925  05DB  2E05               	goto	l1017
   926  05DC  01FD               	clrf	___lwmod@counter
   927  05DD  0AFD               	incf	___lwmod@counter,f
   928  05DE                     l1007:	
   929  05DE  1BF9               	btfsc	___lwmod@divisor+1,7
   930  05DF  2DEC               	goto	l1009
   931  05E0  3001               	movlw	1
   932  05E1                     u555:	
   933  05E1  1003               	clrc
   934  05E2  0DF8               	rlf	___lwmod@divisor,f
   935  05E3  0DF9               	rlf	___lwmod@divisor+1,f
   936  05E4  3EFF               	addlw	-1
   937  05E5  1D03               	skipz
   938  05E6  2DE1               	goto	u555
   939  05E7  3001               	movlw	1
   940  05E8  00FC               	movwf	??___lwmod
   941  05E9  087C               	movf	??___lwmod,w
   942  05EA  07FD               	addwf	___lwmod@counter,f
   943  05EB  2DDE               	goto	l1007
   944  05EC                     l1009:	
   945  05EC  0879               	movf	___lwmod@divisor+1,w
   946  05ED  027B               	subwf	___lwmod@dividend+1,w
   947  05EE  1D03               	skipz
   948  05EF  2DF2               	goto	u575
   949  05F0  0878               	movf	___lwmod@divisor,w
   950  05F1  027A               	subwf	___lwmod@dividend,w
   951  05F2                     u575:	
   952  05F2  1C03               	skipc
   953  05F3  2DFA               	goto	l1013
   954  05F4  0878               	movf	___lwmod@divisor,w
   955  05F5  02FA               	subwf	___lwmod@dividend,f
   956  05F6  0879               	movf	___lwmod@divisor+1,w
   957  05F7  1C03               	skipc
   958  05F8  03FB               	decf	___lwmod@dividend+1,f
   959  05F9  02FB               	subwf	___lwmod@dividend+1,f
   960  05FA                     l1013:	
   961  05FA  3001               	movlw	1
   962  05FB                     u585:	
   963  05FB  1003               	clrc
   964  05FC  0CF9               	rrf	___lwmod@divisor+1,f
   965  05FD  0CF8               	rrf	___lwmod@divisor,f
   966  05FE  3EFF               	addlw	-1
   967  05FF  1D03               	skipz
   968  0600  2DFB               	goto	u585
   969  0601  3001               	movlw	1
   970  0602  02FD               	subwf	___lwmod@counter,f
   971  0603  1D03               	btfss	3,2
   972  0604  2DEC               	goto	l1009
   973  0605                     l1017:	
   974  0605  087B               	movf	___lwmod@dividend+1,w
   975  0606  00F9               	movwf	?___lwmod+1
   976  0607  087A               	movf	___lwmod@dividend,w
   977  0608  00F8               	movwf	?___lwmod
   978  0609  0008               	return
   979  060A                     __end_of___lwmod:	
   980                           
   981                           	psect	text3
   982  060A                     __ptext3:	
   983 ;; *************** function ___lwdiv *****************
   984 ;; Defined at:
   985 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;  divisor         2    0[COMMON] unsigned int 
   988 ;;  dividend        2    2[COMMON] unsigned int 
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  quotient        2    5[COMMON] unsigned int 
   991 ;;  counter         1    7[COMMON] unsigned char 
   992 ;; Return value:  Size  Location     Type
   993 ;;                  2    0[COMMON] unsigned int 
   994 ;; Registers used:
   995 ;;		wreg, status,2, status,0
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1001 ;;      Params:         4       0       0       0       0
  1002 ;;      Locals:         3       0       0       0       0
  1003 ;;      Temps:          1       0       0       0       0
  1004 ;;      Totals:         8       0       0       0       0
  1005 ;;Total ram usage:        8 bytes
  1006 ;; Hardware stack levels used:    1
  1007 ;; This function calls:
  1008 ;;		Nothing
  1009 ;; This function is called by:
  1010 ;;		_sprintf
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014                           
  1015                           ;psect for function ___lwdiv
  1016  060A                     ___lwdiv:	
  1017                           
  1018                           ;incstack = 0
  1019                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1020  060A  01F5               	clrf	___lwdiv@quotient
  1021  060B  01F6               	clrf	___lwdiv@quotient+1
  1022  060C  0870               	movf	___lwdiv@divisor,w
  1023  060D  0471               	iorwf	___lwdiv@divisor+1,w
  1024  060E  1903               	btfsc	3,2
  1025  060F  2E41               	goto	l995
  1026  0610  01F7               	clrf	___lwdiv@counter
  1027  0611  0AF7               	incf	___lwdiv@counter,f
  1028  0612                     l983:	
  1029  0612  1BF1               	btfsc	___lwdiv@divisor+1,7
  1030  0613  2E20               	goto	l985
  1031  0614  3001               	movlw	1
  1032  0615                     u485:	
  1033  0615  1003               	clrc
  1034  0616  0DF0               	rlf	___lwdiv@divisor,f
  1035  0617  0DF1               	rlf	___lwdiv@divisor+1,f
  1036  0618  3EFF               	addlw	-1
  1037  0619  1D03               	skipz
  1038  061A  2E15               	goto	u485
  1039  061B  3001               	movlw	1
  1040  061C  00F4               	movwf	??___lwdiv
  1041  061D  0874               	movf	??___lwdiv,w
  1042  061E  07F7               	addwf	___lwdiv@counter,f
  1043  061F  2E12               	goto	l983
  1044  0620                     l985:	
  1045  0620  3001               	movlw	1
  1046  0621                     u505:	
  1047  0621  1003               	clrc
  1048  0622  0DF5               	rlf	___lwdiv@quotient,f
  1049  0623  0DF6               	rlf	___lwdiv@quotient+1,f
  1050  0624  3EFF               	addlw	-1
  1051  0625  1D03               	skipz
  1052  0626  2E21               	goto	u505
  1053  0627  0871               	movf	___lwdiv@divisor+1,w
  1054  0628  0273               	subwf	___lwdiv@dividend+1,w
  1055  0629  1D03               	skipz
  1056  062A  2E2D               	goto	u515
  1057  062B  0870               	movf	___lwdiv@divisor,w
  1058  062C  0272               	subwf	___lwdiv@dividend,w
  1059  062D                     u515:	
  1060  062D  1C03               	skipc
  1061  062E  2E36               	goto	l991
  1062  062F  0870               	movf	___lwdiv@divisor,w
  1063  0630  02F2               	subwf	___lwdiv@dividend,f
  1064  0631  0871               	movf	___lwdiv@divisor+1,w
  1065  0632  1C03               	skipc
  1066  0633  03F3               	decf	___lwdiv@dividend+1,f
  1067  0634  02F3               	subwf	___lwdiv@dividend+1,f
  1068  0635  1475               	bsf	___lwdiv@quotient,0
  1069  0636                     l991:	
  1070  0636  3001               	movlw	1
  1071  0637                     u525:	
  1072  0637  1003               	clrc
  1073  0638  0CF1               	rrf	___lwdiv@divisor+1,f
  1074  0639  0CF0               	rrf	___lwdiv@divisor,f
  1075  063A  3EFF               	addlw	-1
  1076  063B  1D03               	skipz
  1077  063C  2E37               	goto	u525
  1078  063D  3001               	movlw	1
  1079  063E  02F7               	subwf	___lwdiv@counter,f
  1080  063F  1D03               	btfss	3,2
  1081  0640  2E20               	goto	l985
  1082  0641                     l995:	
  1083  0641  0876               	movf	___lwdiv@quotient+1,w
  1084  0642  00F1               	movwf	?___lwdiv+1
  1085  0643  0875               	movf	___lwdiv@quotient,w
  1086  0644  00F0               	movwf	?___lwdiv
  1087  0645  0008               	return
  1088  0646                     __end_of___lwdiv:	
  1089                           
  1090                           	psect	text4
  1091  05AF                     __ptext4:	
  1092 ;; *************** function ___usart_write_ln *****************
  1093 ;; Defined at:
  1094 ;;		line 61 in file "main.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;  data            1    wreg     PTR unsigned char 
  1097 ;;		 -> buffer(50), 
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  data            1    8[COMMON] PTR unsigned char 
  1100 ;;		 -> buffer(50), 
  1101 ;;  i               2    6[COMMON] int 
  1102 ;; Return value:  Size  Location     Type
  1103 ;;                  1    wreg      void 
  1104 ;; Registers used:
  1105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1106 ;; Tracked objects:
  1107 ;;		On entry : 0/0
  1108 ;;		On exit  : 0/0
  1109 ;;		Unchanged: 0/0
  1110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1111 ;;      Params:         0       0       0       0       0
  1112 ;;      Locals:         3       0       0       0       0
  1113 ;;      Temps:          1       0       0       0       0
  1114 ;;      Totals:         4       0       0       0       0
  1115 ;;Total ram usage:        4 bytes
  1116 ;; Hardware stack levels used:    1
  1117 ;; Hardware stack levels required when called:    1
  1118 ;; This function calls:
  1119 ;;		___write_char
  1120 ;;		_strlen
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           
  1127                           ;psect for function ___usart_write_ln
  1128  05AF                     ___usart_write_ln:	
  1129                           
  1130                           ;incstack = 0
  1131                           ; Regs used in ___usart_write_ln: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1132                           ;___usart_write_ln@data stored from wreg
  1133  05AF  00F8               	movwf	___usart_write_ln@data
  1134                           
  1135                           ;main.c: 62:     int i;;main.c: 63:     for(i=0; i<(strlen(data)); i++) {
  1136  05B0  01F6               	clrf	___usart_write_ln@i
  1137  05B1  01F7               	clrf	___usart_write_ln@i+1
  1138  05B2                     l1031:	
  1139  05B2  0878               	movf	___usart_write_ln@data,w
  1140  05B3  120A  118A  2556  120A  118A  	fcall	_strlen
  1141  05B8  0871               	movf	?_strlen+1,w
  1142  05B9  0277               	subwf	___usart_write_ln@i+1,w
  1143  05BA  1D03               	skipz
  1144  05BB  2DBE               	goto	u605
  1145  05BC  0870               	movf	?_strlen,w
  1146  05BD  0276               	subwf	___usart_write_ln@i,w
  1147  05BE                     u605:	
  1148  05BE  1803               	btfsc	3,0
  1149  05BF  2DD3               	goto	l1033
  1150                           
  1151                           ;main.c: 64:         __write_char(data[i]);
  1152  05C0  0876               	movf	___usart_write_ln@i,w
  1153  05C1  0778               	addwf	___usart_write_ln@data,w
  1154  05C2  00F5               	movwf	??___usart_write_ln
  1155  05C3  0875               	movf	??___usart_write_ln,w
  1156  05C4  0084               	movwf	4
  1157  05C5  1383               	bcf	3,7	;select IRP bank0
  1158  05C6  0800               	movf	0,w
  1159  05C7  120A  118A  252C  120A  118A  	fcall	___write_char
  1160                           
  1161                           ;main.c: 65:     }
  1162  05CC  3001               	movlw	1
  1163  05CD  07F6               	addwf	___usart_write_ln@i,f
  1164  05CE  1803               	skipnc
  1165  05CF  0AF7               	incf	___usart_write_ln@i+1,f
  1166  05D0  3000               	movlw	0
  1167  05D1  07F7               	addwf	___usart_write_ln@i+1,f
  1168  05D2  2DB2               	goto	l1031
  1169  05D3                     l1033:	
  1170                           
  1171                           ;main.c: 66:     __write_char('\r');
  1172  05D3  300D               	movlw	13
  1173  05D4  120A  118A  252C   	fcall	___write_char
  1174  05D7  0008               	return
  1175  05D8                     __end_of___usart_write_ln:	
  1176                           
  1177                           	psect	text5
  1178  0556                     __ptext5:	
  1179 ;; *************** function _strlen *****************
  1180 ;; Defined at:
  1181 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strlen.c"
  1182 ;; Parameters:    Size  Location     Type
  1183 ;;  s               1    wreg     PTR const unsigned char 
  1184 ;;		 -> buffer(50), 
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;  s               1    3[COMMON] PTR const unsigned char 
  1187 ;;		 -> buffer(50), 
  1188 ;;  cp              1    4[COMMON] PTR const unsigned char 
  1189 ;;		 -> buffer(50), 
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  2    0[COMMON] unsigned int 
  1192 ;; Registers used:
  1193 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1199 ;;      Params:         2       0       0       0       0
  1200 ;;      Locals:         2       0       0       0       0
  1201 ;;      Temps:          1       0       0       0       0
  1202 ;;      Totals:         5       0       0       0       0
  1203 ;;Total ram usage:        5 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; This function calls:
  1206 ;;		Nothing
  1207 ;; This function is called by:
  1208 ;;		___usart_write_ln
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           
  1213                           ;psect for function _strlen
  1214  0556                     _strlen:	
  1215                           
  1216                           ;incstack = 0
  1217                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  1218                           ;strlen@s stored from wreg
  1219  0556  00F3               	movwf	strlen@s
  1220  0557  0873               	movf	strlen@s,w
  1221  0558  00F2               	movwf	??_strlen
  1222  0559  0872               	movf	??_strlen,w
  1223  055A  00F4               	movwf	strlen@cp
  1224  055B                     l927:	
  1225  055B  0874               	movf	strlen@cp,w
  1226  055C  0084               	movwf	4
  1227  055D  1383               	bcf	3,7	;select IRP bank0
  1228  055E  0800               	movf	0,w
  1229  055F  1903               	btfsc	3,2
  1230  0560  2D66               	goto	l929
  1231  0561  3001               	movlw	1
  1232  0562  00F2               	movwf	??_strlen
  1233  0563  0872               	movf	??_strlen,w
  1234  0564  07F4               	addwf	strlen@cp,f
  1235  0565  2D5B               	goto	l927
  1236  0566                     l929:	
  1237  0566  0873               	movf	strlen@s,w
  1238  0567  0274               	subwf	strlen@cp,w
  1239  0568  00F0               	movwf	?_strlen
  1240  0569  01F1               	clrf	?_strlen+1
  1241  056A  1BF0               	btfsc	?_strlen,7
  1242  056B  03F1               	decf	?_strlen+1,f
  1243  056C  0008               	return
  1244  056D                     __end_of_strlen:	
  1245                           
  1246                           	psect	text6
  1247  052C                     __ptext6:	
  1248 ;; *************** function ___write_char *****************
  1249 ;; Defined at:
  1250 ;;		line 54 in file "main.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  c               1    wreg     unsigned char 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  c               1    0[COMMON] unsigned char 
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1264 ;;      Params:         0       0       0       0       0
  1265 ;;      Locals:         1       0       0       0       0
  1266 ;;      Temps:          0       0       0       0       0
  1267 ;;      Totals:         1       0       0       0       0
  1268 ;;Total ram usage:        1 bytes
  1269 ;; Hardware stack levels used:    1
  1270 ;; This function calls:
  1271 ;;		Nothing
  1272 ;; This function is called by:
  1273 ;;		___usart_write_ln
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           
  1278                           ;psect for function ___write_char
  1279  052C                     ___write_char:	
  1280                           
  1281                           ;incstack = 0
  1282                           ; Regs used in ___write_char: [wreg]
  1283                           ;___write_char@c stored from wreg
  1284  052C  00F0               	movwf	___write_char@c
  1285  052D                     l35:	
  1286                           ;main.c: 57:     }
  1287                           
  1288                           
  1289                           ;main.c: 55:     while(!TXIF) {
  1290  052D  1283               	bcf	3,5	;RP0=0, select bank0
  1291  052E  1303               	bcf	3,6	;RP1=0, select bank0
  1292  052F  1E0C               	btfss	12,4	;volatile
  1293  0530  2D2D               	goto	l35
  1294                           
  1295                           ;main.c: 58:     TXREG = c;
  1296  0531  0870               	movf	___write_char@c,w
  1297  0532  0099               	movwf	25	;volatile
  1298  0533  0008               	return
  1299  0534                     __end_of___write_char:	
  1300                           
  1301                           	psect	text7
  1302  056D                     __ptext7:	
  1303 ;; *************** function ___set_baud_rate *****************
  1304 ;; Defined at:
  1305 ;;		line 47 in file "main.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  baud_rate       2    6[BANK0 ] int 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;		None
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, status,2, status,0, pclath, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1319 ;;      Params:         0       2       0       0       0
  1320 ;;      Locals:         0       0       0       0       0
  1321 ;;      Temps:          0       0       0       0       0
  1322 ;;      Totals:         0       2       0       0       0
  1323 ;;Total ram usage:        2 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; Hardware stack levels required when called:    1
  1326 ;; This function calls:
  1327 ;;		___aldiv
  1328 ;; This function is called by:
  1329 ;;		_main
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           
  1334                           ;psect for function ___set_baud_rate
  1335  056D                     ___set_baud_rate:	
  1336                           
  1337                           ;main.c: 51:     SPBRG = ((16000000 / 16) / baud_rate) - 1;
  1338                           
  1339                           ;incstack = 0
  1340                           ; Regs used in ___set_baud_rate: [wreg+status,2+status,0+pclath+cstack]
  1341  056D  1283               	bcf	3,5	;RP0=0, select bank0
  1342  056E  1303               	bcf	3,6	;RP1=0, select bank0
  1343  056F  0858               	movf	___set_baud_rate@baud_rate,w
  1344  0570  00F0               	movwf	___aldiv@divisor
  1345  0571  0859               	movf	___set_baud_rate@baud_rate+1,w
  1346  0572  00F1               	movwf	___aldiv@divisor+1
  1347  0573  3000               	movlw	0
  1348  0574  1BF1               	btfsc	___aldiv@divisor+1,7
  1349  0575  30FF               	movlw	255
  1350  0576  00F2               	movwf	___aldiv@divisor+2
  1351  0577  00F3               	movwf	___aldiv@divisor+3
  1352  0578  3000               	movlw	0
  1353  0579  00F7               	movwf	___aldiv@dividend+3
  1354  057A  300F               	movlw	15
  1355  057B  00F6               	movwf	___aldiv@dividend+2
  1356  057C  3042               	movlw	66
  1357  057D  00F5               	movwf	___aldiv@dividend+1
  1358  057E  3040               	movlw	64
  1359  057F  00F4               	movwf	___aldiv@dividend
  1360  0580  120A  118A  268E   	fcall	___aldiv
  1361  0583  0870               	movf	?___aldiv,w
  1362  0584  3EFF               	addlw	255
  1363  0585  1683               	bsf	3,5	;RP0=1, select bank1
  1364  0586  1303               	bcf	3,6	;RP1=0, select bank1
  1365  0587  0099               	movwf	25	;volatile
  1366  0588  0008               	return
  1367  0589                     __end_of___set_baud_rate:	
  1368                           
  1369                           	psect	text8
  1370  068E                     __ptext8:	
  1371 ;; *************** function ___aldiv *****************
  1372 ;; Defined at:
  1373 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;  divisor         4    0[COMMON] long 
  1376 ;;  dividend        4    4[COMMON] long 
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;  quotient        4    2[BANK0 ] long 
  1379 ;;  sign            1    1[BANK0 ] unsigned char 
  1380 ;;  counter         1    0[BANK0 ] unsigned char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  4    0[COMMON] long 
  1383 ;; Registers used:
  1384 ;;		wreg, status,2, status,0
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1390 ;;      Params:         8       0       0       0       0
  1391 ;;      Locals:         0       6       0       0       0
  1392 ;;      Temps:          1       0       0       0       0
  1393 ;;      Totals:         9       6       0       0       0
  1394 ;;Total ram usage:       15 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; This function calls:
  1397 ;;		Nothing
  1398 ;; This function is called by:
  1399 ;;		___set_baud_rate
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           
  1404                           ;psect for function ___aldiv
  1405  068E                     ___aldiv:	
  1406                           
  1407                           ;incstack = 0
  1408                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1409  068E  1283               	bcf	3,5	;RP0=0, select bank0
  1410  068F  1303               	bcf	3,6	;RP1=0, select bank0
  1411  0690  01D3               	clrf	___aldiv@sign
  1412  0691  1FF3               	btfss	___aldiv@divisor+3,7
  1413  0692  2EA0               	goto	l240
  1414  0693  09F0               	comf	___aldiv@divisor,f
  1415  0694  09F1               	comf	___aldiv@divisor+1,f
  1416  0695  09F2               	comf	___aldiv@divisor+2,f
  1417  0696  09F3               	comf	___aldiv@divisor+3,f
  1418  0697  0AF0               	incf	___aldiv@divisor,f
  1419  0698  1903               	skipnz
  1420  0699  0AF1               	incf	___aldiv@divisor+1,f
  1421  069A  1903               	skipnz
  1422  069B  0AF2               	incf	___aldiv@divisor+2,f
  1423  069C  1903               	skipnz
  1424  069D  0AF3               	incf	___aldiv@divisor+3,f
  1425  069E  01D3               	clrf	___aldiv@sign
  1426  069F  0AD3               	incf	___aldiv@sign,f
  1427  06A0                     l240:	
  1428  06A0  1FF7               	btfss	___aldiv@dividend+3,7
  1429  06A1  2EB1               	goto	l943
  1430  06A2  09F4               	comf	___aldiv@dividend,f
  1431  06A3  09F5               	comf	___aldiv@dividend+1,f
  1432  06A4  09F6               	comf	___aldiv@dividend+2,f
  1433  06A5  09F7               	comf	___aldiv@dividend+3,f
  1434  06A6  0AF4               	incf	___aldiv@dividend,f
  1435  06A7  1903               	skipnz
  1436  06A8  0AF5               	incf	___aldiv@dividend+1,f
  1437  06A9  1903               	skipnz
  1438  06AA  0AF6               	incf	___aldiv@dividend+2,f
  1439  06AB  1903               	skipnz
  1440  06AC  0AF7               	incf	___aldiv@dividend+3,f
  1441  06AD  3001               	movlw	1
  1442  06AE  00F8               	movwf	??___aldiv
  1443  06AF  0878               	movf	??___aldiv,w
  1444  06B0  06D3               	xorwf	___aldiv@sign,f
  1445  06B1                     l943:	
  1446  06B1  3000               	movlw	0
  1447  06B2  00D7               	movwf	___aldiv@quotient+3
  1448  06B3  3000               	movlw	0
  1449  06B4  00D6               	movwf	___aldiv@quotient+2
  1450  06B5  3000               	movlw	0
  1451  06B6  00D5               	movwf	___aldiv@quotient+1
  1452  06B7  3000               	movlw	0
  1453  06B8  00D4               	movwf	___aldiv@quotient
  1454  06B9  0873               	movf	___aldiv@divisor+3,w
  1455  06BA  0472               	iorwf	___aldiv@divisor+2,w
  1456  06BB  0471               	iorwf	___aldiv@divisor+1,w
  1457  06BC  0470               	iorwf	___aldiv@divisor,w
  1458  06BD  1903               	skipnz
  1459  06BE  2F06               	goto	l965
  1460  06BF  01D2               	clrf	___aldiv@counter
  1461  06C0  0AD2               	incf	___aldiv@counter,f
  1462  06C1                     l951:	
  1463  06C1  1BF3               	btfsc	___aldiv@divisor+3,7
  1464  06C2  2ED1               	goto	l953
  1465  06C3  3001               	movlw	1
  1466  06C4  00F8               	movwf	??___aldiv
  1467  06C5                     u405:	
  1468  06C5  1003               	clrc
  1469  06C6  0DF0               	rlf	___aldiv@divisor,f
  1470  06C7  0DF1               	rlf	___aldiv@divisor+1,f
  1471  06C8  0DF2               	rlf	___aldiv@divisor+2,f
  1472  06C9  0DF3               	rlf	___aldiv@divisor+3,f
  1473  06CA  0BF8               	decfsz	??___aldiv,f
  1474  06CB  2EC5               	goto	u405
  1475  06CC  3001               	movlw	1
  1476  06CD  00F8               	movwf	??___aldiv
  1477  06CE  0878               	movf	??___aldiv,w
  1478  06CF  07D2               	addwf	___aldiv@counter,f
  1479  06D0  2EC1               	goto	l951
  1480  06D1                     l953:	
  1481  06D1  3001               	movlw	1
  1482  06D2  00F8               	movwf	??___aldiv
  1483  06D3                     u425:	
  1484  06D3  1003               	clrc
  1485  06D4  0DD4               	rlf	___aldiv@quotient,f
  1486  06D5  0DD5               	rlf	___aldiv@quotient+1,f
  1487  06D6  0DD6               	rlf	___aldiv@quotient+2,f
  1488  06D7  0DD7               	rlf	___aldiv@quotient+3,f
  1489  06D8  0BF8               	decfsz	??___aldiv,f
  1490  06D9  2ED3               	goto	u425
  1491  06DA  0873               	movf	___aldiv@divisor+3,w
  1492  06DB  0277               	subwf	___aldiv@dividend+3,w
  1493  06DC  1D03               	skipz
  1494  06DD  2EE8               	goto	u435
  1495  06DE  0872               	movf	___aldiv@divisor+2,w
  1496  06DF  0276               	subwf	___aldiv@dividend+2,w
  1497  06E0  1D03               	skipz
  1498  06E1  2EE8               	goto	u435
  1499  06E2  0871               	movf	___aldiv@divisor+1,w
  1500  06E3  0275               	subwf	___aldiv@dividend+1,w
  1501  06E4  1D03               	skipz
  1502  06E5  2EE8               	goto	u435
  1503  06E6  0870               	movf	___aldiv@divisor,w
  1504  06E7  0274               	subwf	___aldiv@dividend,w
  1505  06E8                     u435:	
  1506  06E8  1C03               	skipc
  1507  06E9  2EF9               	goto	l961
  1508  06EA  0870               	movf	___aldiv@divisor,w
  1509  06EB  02F4               	subwf	___aldiv@dividend,f
  1510  06EC  0871               	movf	___aldiv@divisor+1,w
  1511  06ED  1C03               	skipc
  1512  06EE  0F71               	incfsz	___aldiv@divisor+1,w
  1513  06EF  02F5               	subwf	___aldiv@dividend+1,f
  1514  06F0  0872               	movf	___aldiv@divisor+2,w
  1515  06F1  1C03               	skipc
  1516  06F2  0F72               	incfsz	___aldiv@divisor+2,w
  1517  06F3  02F6               	subwf	___aldiv@dividend+2,f
  1518  06F4  0873               	movf	___aldiv@divisor+3,w
  1519  06F5  1C03               	skipc
  1520  06F6  0F73               	incfsz	___aldiv@divisor+3,w
  1521  06F7  02F7               	subwf	___aldiv@dividend+3,f
  1522  06F8  1454               	bsf	___aldiv@quotient,0
  1523  06F9                     l961:	
  1524  06F9  3001               	movlw	1
  1525  06FA                     u445:	
  1526  06FA  1003               	clrc
  1527  06FB  0CF3               	rrf	___aldiv@divisor+3,f
  1528  06FC  0CF2               	rrf	___aldiv@divisor+2,f
  1529  06FD  0CF1               	rrf	___aldiv@divisor+1,f
  1530  06FE  0CF0               	rrf	___aldiv@divisor,f
  1531  06FF  3EFF               	addlw	-1
  1532  0700  1D03               	skipz
  1533  0701  2EFA               	goto	u445
  1534  0702  3001               	movlw	1
  1535  0703  02D2               	subwf	___aldiv@counter,f
  1536  0704  1D03               	btfss	3,2
  1537  0705  2ED1               	goto	l953
  1538  0706                     l965:	
  1539  0706  0853               	movf	___aldiv@sign,w
  1540  0707  1903               	btfsc	3,2
  1541  0708  2F14               	goto	l969
  1542  0709  09D4               	comf	___aldiv@quotient,f
  1543  070A  09D5               	comf	___aldiv@quotient+1,f
  1544  070B  09D6               	comf	___aldiv@quotient+2,f
  1545  070C  09D7               	comf	___aldiv@quotient+3,f
  1546  070D  0AD4               	incf	___aldiv@quotient,f
  1547  070E  1903               	skipnz
  1548  070F  0AD5               	incf	___aldiv@quotient+1,f
  1549  0710  1903               	skipnz
  1550  0711  0AD6               	incf	___aldiv@quotient+2,f
  1551  0712  1903               	skipnz
  1552  0713  0AD7               	incf	___aldiv@quotient+3,f
  1553  0714                     l969:	
  1554  0714  0857               	movf	___aldiv@quotient+3,w
  1555  0715  00F3               	movwf	?___aldiv+3
  1556  0716  0856               	movf	___aldiv@quotient+2,w
  1557  0717  00F2               	movwf	?___aldiv+2
  1558  0718  0855               	movf	___aldiv@quotient+1,w
  1559  0719  00F1               	movwf	?___aldiv+1
  1560  071A  0854               	movf	___aldiv@quotient,w
  1561  071B  00F0               	movwf	?___aldiv
  1562  071C  0008               	return
  1563  071D                     __end_of___aldiv:	
  1564                           
  1565                           	psect	text9
  1566  053C                     __ptext9:	
  1567 ;; *************** function ___init_usart *****************
  1568 ;; Defined at:
  1569 ;;		line 18 in file "main.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;		None
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;		None
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		None
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1583 ;;      Params:         0       0       0       0       0
  1584 ;;      Locals:         0       0       0       0       0
  1585 ;;      Temps:          0       0       0       0       0
  1586 ;;      Totals:         0       0       0       0       0
  1587 ;;Total ram usage:        0 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; This function calls:
  1590 ;;		Nothing
  1591 ;; This function is called by:
  1592 ;;		_main
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           
  1597                           ;psect for function ___init_usart
  1598  053C                     ___init_usart:	
  1599                           
  1600                           ;main.c: 28:     TXSTAbits.TX9 = 0;
  1601                           
  1602                           ;incstack = 0
  1603                           ; Regs used in ___init_usart: []
  1604  053C  1683               	bsf	3,5	;RP0=1, select bank1
  1605  053D  1303               	bcf	3,6	;RP1=0, select bank1
  1606  053E  1318               	bcf	24,6	;volatile
  1607                           
  1608                           ;main.c: 29:     TXSTAbits.TXEN = 1;
  1609  053F  1698               	bsf	24,5	;volatile
  1610                           
  1611                           ;main.c: 30:     TXSTAbits.SYNC = 0;
  1612  0540  1218               	bcf	24,4	;volatile
  1613                           
  1614                           ;main.c: 31:     TXSTAbits.BRGH = 1;
  1615  0541  1518               	bsf	24,2	;volatile
  1616                           
  1617                           ;main.c: 42:     RCSTAbits.SPEN = 1;
  1618  0542  1283               	bcf	3,5	;RP0=0, select bank0
  1619  0543  1303               	bcf	3,6	;RP1=0, select bank0
  1620  0544  1798               	bsf	24,7	;volatile
  1621                           
  1622                           ;main.c: 43:     RCSTAbits.RX9 = 0;
  1623  0545  1318               	bcf	24,6	;volatile
  1624                           
  1625                           ;main.c: 44:     RCSTAbits.CREN = 1;
  1626  0546  1618               	bsf	24,4	;volatile
  1627  0547  0008               	return
  1628  0548                     __end_of___init_usart:	
  1629                           
  1630                           	psect	text10
  1631  0548                     __ptext10:	
  1632 ;; *************** function ___init_adc *****************
  1633 ;; Defined at:
  1634 ;;		line 69 in file "main.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;		None
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      void 
  1641 ;; Registers used:
  1642 ;;		wreg, status,2, status,0
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1648 ;;      Params:         0       0       0       0       0
  1649 ;;      Locals:         0       0       0       0       0
  1650 ;;      Temps:          0       0       0       0       0
  1651 ;;      Totals:         0       0       0       0       0
  1652 ;;Total ram usage:        0 bytes
  1653 ;; Hardware stack levels used:    1
  1654 ;; This function calls:
  1655 ;;		Nothing
  1656 ;; This function is called by:
  1657 ;;		_main
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           
  1662                           ;psect for function ___init_adc
  1663  0548                     ___init_adc:	
  1664                           
  1665                           ;main.c: 70:     ADCON0bits.ADCS = 0b00;
  1666                           
  1667                           ;incstack = 0
  1668                           ; Regs used in ___init_adc: [wreg+status,2+status,0]
  1669  0548  303F               	movlw	-193
  1670  0549  1283               	bcf	3,5	;RP0=0, select bank0
  1671  054A  1303               	bcf	3,6	;RP1=0, select bank0
  1672  054B  059F               	andwf	31,f	;volatile
  1673                           
  1674                           ;main.c: 71:     ADCON0bits.CHS = 0b000;
  1675  054C  30C7               	movlw	-57
  1676  054D  059F               	andwf	31,f	;volatile
  1677                           
  1678                           ;main.c: 72:     ADCON0bits.ADON = 0;
  1679  054E  101F               	bcf	31,0	;volatile
  1680                           
  1681                           ;main.c: 74:     ADCON1bits.ADFM = 1;
  1682  054F  1683               	bsf	3,5	;RP0=1, select bank1
  1683  0550  1303               	bcf	3,6	;RP1=0, select bank1
  1684  0551  179F               	bsf	31,7	;volatile
  1685                           
  1686                           ;main.c: 75:     ADCON1bits.ADCS2 = 0;
  1687  0552  131F               	bcf	31,6	;volatile
  1688                           
  1689                           ;main.c: 76:     ADCON1bits.PCFG = 0b0000;
  1690  0553  30F0               	movlw	-16
  1691  0554  059F               	andwf	31,f	;volatile
  1692  0555  0008               	return
  1693  0556                     __end_of___init_adc:	
  1694                           
  1695                           	psect	text11
  1696  0589                     __ptext11:	
  1697 ;; *************** function ___adc_read *****************
  1698 ;; Defined at:
  1699 ;;		line 79 in file "main.c"
  1700 ;; Parameters:    Size  Location     Type
  1701 ;;  adc_channel     2    0[COMMON] int 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  adc_value       2    4[COMMON] int 
  1704 ;; Return value:  Size  Location     Type
  1705 ;;                  2    0[COMMON] int 
  1706 ;; Registers used:
  1707 ;;		wreg, status,2, status,0
  1708 ;; Tracked objects:
  1709 ;;		On entry : 0/0
  1710 ;;		On exit  : 0/0
  1711 ;;		Unchanged: 0/0
  1712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1713 ;;      Params:         2       0       0       0       0
  1714 ;;      Locals:         2       0       0       0       0
  1715 ;;      Temps:          2       0       0       0       0
  1716 ;;      Totals:         6       0       0       0       0
  1717 ;;Total ram usage:        6 bytes
  1718 ;; Hardware stack levels used:    1
  1719 ;; This function calls:
  1720 ;;		Nothing
  1721 ;; This function is called by:
  1722 ;;		_main
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           
  1727                           ;psect for function ___adc_read
  1728  0589                     ___adc_read:	
  1729                           
  1730                           ;main.c: 80:     ADCON0bits.ADON = 1;
  1731                           
  1732                           ;incstack = 0
  1733                           ; Regs used in ___adc_read: [wreg+status,2+status,0]
  1734  0589  1283               	bcf	3,5	;RP0=0, select bank0
  1735  058A  1303               	bcf	3,6	;RP1=0, select bank0
  1736  058B  141F               	bsf	31,0	;volatile
  1737                           
  1738                           ;main.c: 81:     ADCON0bits.CHS = adc_channel;
  1739  058C  0870               	movf	___adc_read@adc_channel,w
  1740  058D  00F2               	movwf	??___adc_read
  1741  058E  0DF2               	rlf	??___adc_read,f
  1742  058F  0DF2               	rlf	??___adc_read,f
  1743  0590  0DF2               	rlf	??___adc_read,f
  1744  0591  081F               	movf	31,w	;volatile
  1745  0592  0672               	xorwf	??___adc_read,w
  1746  0593  39C7               	andlw	-57
  1747  0594  0672               	xorwf	??___adc_read,w
  1748  0595  009F               	movwf	31	;volatile
  1749                           
  1750                           ;main.c: 82:     _delay((unsigned long)((10)*(16000000/4000.0)));
  1751  0596  3034               	movlw	52
  1752  0597  00F3               	movwf	??___adc_read+1
  1753  0598  30F1               	movlw	241
  1754  0599  00F2               	movwf	??___adc_read
  1755  059A                     u707:	
  1756  059A  0BF2               	decfsz	??___adc_read,f
  1757  059B  2D9A               	goto	u707
  1758  059C  0BF3               	decfsz	??___adc_read+1,f
  1759  059D  2D9A               	goto	u707
  1760  059E  2D9F               	nop2
  1761                           
  1762                           ;main.c: 83:     ADCON0bits.GO = 1;
  1763  059F  1283               	bcf	3,5	;RP0=0, select bank0
  1764  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  1765  05A1  151F               	bsf	31,2	;volatile
  1766  05A2                     l50:	
  1767                           ;main.c: 86:     }
  1768                           
  1769                           
  1770                           ;main.c: 84:     while(ADCON0bits.GO_DONE == 1) {
  1771  05A2  191F               	btfsc	31,2	;volatile
  1772  05A3  2DA2               	goto	l50
  1773                           
  1774                           ;main.c: 87:     int adc_value = (ADRESH << 8) + (ADRESL);
  1775  05A4  081E               	movf	30,w	;volatile
  1776  05A5  00F5               	movwf	___adc_read@adc_value+1
  1777  05A6  1683               	bsf	3,5	;RP0=1, select bank1
  1778  05A7  1303               	bcf	3,6	;RP1=0, select bank1
  1779  05A8  081E               	movf	30,w	;volatile
  1780  05A9  00F4               	movwf	___adc_read@adc_value
  1781                           
  1782                           ;main.c: 88:     return adc_value;
  1783  05AA  0875               	movf	___adc_read@adc_value+1,w
  1784  05AB  00F1               	movwf	?___adc_read+1
  1785  05AC  0874               	movf	___adc_read@adc_value,w
  1786  05AD  00F0               	movwf	?___adc_read
  1787  05AE  0008               	return
  1788  05AF                     __end_of___adc_read:	
  1789  007E                     btemp	set	126	;btemp
  1790  007E                     wtemp0	set	126


Data Sizes:
    Strings     18
    Constant    10
    Data        0
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     18      68
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 50
		 -> buffer(BANK0[50]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 50
		 -> buffer(BANK0[50]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> buffer(BANK0[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    __usart_write_ln@data	PTR unsigned char  size(1) Largest target is 50
		 -> buffer(BANK0[50]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___usart_write_ln->_strlen
    ___set_baud_rate->___aldiv

Critical Paths under _main in BANK0

    _main->_sprintf
    ___set_baud_rate->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2173
                                             13 BANK0      5     5      0
                         ___adc_read
                         ___init_adc
                       ___init_usart
                    ___set_baud_rate
                   ___usart_write_ln
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) ___usart_write_ln                                     4     4      0     268
                                              5 COMMON     4     4      0
                       ___write_char
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               5     3      2     123
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___write_char                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___set_baud_rate                                      2     0      2     550
                                              6 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) ___init_usart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___init_adc                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___adc_read                                           6     4      2     121
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___adc_read
   ___init_adc
   ___init_usart
   ___set_baud_rate
     ___aldiv
   ___usart_write_ln
     ___write_char
     _strlen
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      52       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     12      44       5       85.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      52      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 18 05:39:40 2019

                        pc 0002                __CFG_CP$OFF 0000                         l50 05A2  
                       l35 052D                         fsr 0004      __size_of___init_usart 000C  
                      l240 06A0                        l951 06C1                        l943 06B1  
                      l927 055B                        l961 06F9                        l953 06D1  
                      l929 0566                        l965 0706                        l991 0636  
                      l983 0612                        l969 0714                        l985 0620  
                      l995 0641                        u405 06C5                        u425 06D3  
                      u505 0621               __CFG_CPD$OFF 0000                        u435 06E8  
                      u515 062D                        u445 06FA                        u605 05BE  
                      u525 0637                        u707 059A                        u555 05E1  
                      u485 0615                        u645 0792                        u575 05F2  
                      u585 05FB                        u697 0686                        fsr0 0004  
                      indf 0000               __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000  
                     l1013 05FA                       l1031 05B2                       l1007 05DE  
                     l1033 05D3                       l1009 05EC                       l1017 0605  
                     l1105 07AF                       l1107 0724                       l1123 065B  
                     l1109 07F0                       l1151 0757                       l1063 0744  
                     l1091 079C                       l1085 077B                       l1069 0762  
                     l1079 0779                       l1097 07AB                       STR_1 0013  
                     _TXIF 0064               __CFG_WRT$OFF 0000                       _main 0646  
                     btemp 007E              __CFG_BOREN$ON 0000   __end_of___usart_write_ln 05D8  
                     start 0000               ___init_usart 053C            __end_of___aldiv 071D  
                    ?_main 0070              __CFG_WDTE$OFF 0000            __end_of___lwdiv 0646  
          __end_of___lwmod 060A                      _SPBRG 0099                      _TXREG 0019  
          __end_of_dpowers 0013                      pclath 000A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 07F5              main@adc_value 0062  
         ?___set_baud_rate 0058            __initialization 07F5               __end_of_main 068E  
    __size_of___write_char 0008                     ??_main 005F                     _ADRESH 001E  
                   _ADRESL 009E             __CFG_PWRTE$OFF 0000               ___write_char 052C  
                ??___aldiv 0078                  ??___lwdiv 0074                  ??___lwmod 007C  
                   _buffer 0020                     _strlen 0556                 ___adc_read 0589  
                ??_sprintf 0055  ___set_baud_rate@baud_rate 0058       ___adc_read@adc_value 0074  
  __end_of__initialization 07FC                 ___init_adc 0548             __pcstackCOMMON 0070  
       ___usart_write_ln@i 0076                 __pbssBANK0 0020          ?___usart_write_ln 0070  
    ___usart_write_ln@data 0078                 __pmaintext 0646         ??___usart_write_ln 0075  
                  ?_strlen 0070                ?___adc_read 0070                 __stringtab 0003  
              ?___init_adc 0070                    ___aldiv 068E                    ___lwdiv 060A  
                  ___lwmod 05D8                    __ptext1 071D                    __ptext2 05D8  
                  __ptext3 060A                    __ptext4 05AF                    __ptext5 0556  
                  __ptext6 052C                    __ptext7 056D                    __ptext8 068E  
                  __ptext9 053C            __size_of_strlen 0017                    _dpowers 0009  
         ___aldiv@dividend 0074                    _sprintf 071D                    clrloop0 0535  
     end_of_initialization 07FC        __size_of___adc_read 0026                  _RCSTAbits 0018  
         ___aldiv@quotient 0054                    strlen@s 0073   __size_of___set_baud_rate 001C  
      __size_of___init_adc 000E                  _TXSTAbits 0098             __end_of_strlen 056D  
      start_initialization 07F5              ?___init_usart 0070                   ??_strlen 0072  
__size_of___usart_write_ln 0029               ??___adc_read 0072                  ___latbits 0002  
            __pcstackBANK0 0052          ??___set_baud_rate 0079                sprintf@flag 0059  
              sprintf@prec 005A             ??___init_usart 0070               ??___init_adc 0070  
         ___lwdiv@dividend 0072                   ?___aldiv 0070         __end_of___adc_read 05AF  
                 ?___lwdiv 0070                   ?___lwmod 0078                  __pstrings 0003  
         ___lwdiv@quotient 0075         __end_of___init_adc 0556                   ?_sprintf 0052  
          ___aldiv@divisor 0070            ___aldiv@counter 0052                  clear_ram0 0534  
            ?___write_char 0070                 _ADCON0bits 001F                __stringbase 0008  
               _ADCON1bits 009F             ___write_char@c 0070             ??___write_char 0070  
         __size_of___aldiv 008F           __size_of___lwdiv 003C           __size_of___lwmod 0032  
       __end_of__stringtab 0009           ___usart_write_ln 05AF                 sprintf@val 005B  
     __end_of___init_usart 0548            ___lwdiv@divisor 0070            ___lwdiv@counter 0077  
                 __ptext10 0548                   __ptext11 0589           __size_of_sprintf 00D8  
            __size_of_main 0048            ___set_baud_rate 056D                  sprintf@ap 0058  
                sprintf@sp 005D           ___lwmod@dividend 007A                  stringcode 0003  
                 sprintf@c 005E                   sprintf@f 0052            ___lwmod@divisor 0078  
     __end_of___write_char 0534                   strlen@cp 0074            ___lwmod@counter 007D  
                 stringdir 0003                   stringtab 0003               ___aldiv@sign 0053  
   ___adc_read@adc_channel 0070    __end_of___set_baud_rate 0589  
